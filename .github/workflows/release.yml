name: Build and Release Electron App

on:
  push:
    branches:
      - main # 仅对 main 分支生效
    tags: # 仅在推送 Tag 时触发
      - 'v*' # 例如 v1.0.0 格式的 Tag

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest] # 构建多个平台
        node-version: [22.9.0] # 指定 Node.js 版本

    steps:
      # 检出代码
      - name: Checkout code
        uses: actions/checkout@v3

      # 设置 Node.js 环境
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      # 安装依赖
      - name: Install dependencies
        run: yarn install

      # 构建 Electron 应用
      - name: Build Electron App
        run: yarn run build

      # 打包应用
      - name: Package Electron App
        run: |
          yarn run electron-builder --${{ matrix.os == 'ubuntu-latest' && 'linux' || matrix.os == 'macos-latest' && 'mac' || 'win' }} \
            --publish never

      # 上传构建产物到 GitHub Actions 的工作区
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-build
          path: dist/ # 假设打包产物在 dist 文件夹中

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # 检出代码
      - name: Checkout code
        uses: actions/checkout@v3

      # 下载构建产物
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.os }}-build

      # 创建 GitHub Release 并上传构建产物
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: |
            dist/*.AppImage
            dist/*.dmg
            dist/*.exe
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }} # 使用推送的 Tag 作为版本号
          name: Release ${{ github.ref_name }}
          body: |
            自动构建的 Electron 应用发布。
          draft: false
          prerelease: false